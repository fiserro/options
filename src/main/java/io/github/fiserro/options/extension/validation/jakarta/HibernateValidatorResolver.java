package io.github.fiserro.options.extension.validation.jakarta;

import jakarta.validation.ConstraintValidator;
import jakarta.validation.constraints.DecimalMax;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Future;
import jakarta.validation.constraints.FutureOrPresent;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Negative;
import jakarta.validation.constraints.NegativeOrZero;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Past;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.PositiveOrZero;
import jakarta.validation.constraints.Size;
import java.lang.annotation.Annotation;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.MonthDay;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.time.Year;
import java.time.YearMonth;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import org.hibernate.validator.internal.constraintvalidators.bv.DigitsValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.EmailValidator;
import org.hibernate.validator.internal.constraintvalidators.bv.NotBlankValidator;
import org.hibernate.validator.internal.constraintvalidators.bv.NotNullValidator;
import org.hibernate.validator.internal.constraintvalidators.bv.PatternValidator;
import org.hibernate.validator.internal.constraintvalidators.bv.notempty.NotEmptyValidatorForArray;
import org.hibernate.validator.internal.constraintvalidators.bv.notempty.NotEmptyValidatorForCharSequence;
import org.hibernate.validator.internal.constraintvalidators.bv.notempty.NotEmptyValidatorForCollection;
import org.hibernate.validator.internal.constraintvalidators.bv.notempty.NotEmptyValidatorForMap;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MaxValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.MinValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForCharSequence;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMaxValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForCharSequence;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.bound.decimal.DecimalMinValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeOrZeroValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.NegativeValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveOrZeroValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForBigDecimal;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForBigInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForByte;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForInteger;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForLong;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForNumber;
import org.hibernate.validator.internal.constraintvalidators.bv.number.sign.PositiveValidatorForShort;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArray;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfBoolean;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfByte;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfChar;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfDouble;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfFloat;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfInt;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfLong;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForArraysOfShort;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCharSequence;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForCollection;
import org.hibernate.validator.internal.constraintvalidators.bv.size.SizeValidatorForMap;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForCalendar;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForInstant;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForLocalDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForLocalDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForLocalTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForMonthDay;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForOffsetDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForOffsetTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForYear;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForYearMonth;
import org.hibernate.validator.internal.constraintvalidators.bv.time.future.FutureValidatorForZonedDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForCalendar;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForInstant;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForLocalDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForLocalDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForLocalTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForMonthDay;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForOffsetDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForOffsetTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForYear;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForYearMonth;
import org.hibernate.validator.internal.constraintvalidators.bv.time.futureorpresent.FutureOrPresentValidatorForZonedDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForCalendar;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForInstant;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForLocalDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForLocalDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForLocalTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForMonthDay;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForOffsetDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForOffsetTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForYear;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForYearMonth;
import org.hibernate.validator.internal.constraintvalidators.bv.time.past.PastValidatorForZonedDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForCalendar;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForInstant;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForLocalDate;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForLocalDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForLocalTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForMonthDay;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForOffsetDateTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForOffsetTime;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForYear;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForYearMonth;
import org.hibernate.validator.internal.constraintvalidators.bv.time.pastorpresent.PastOrPresentValidatorForZonedDateTime;

/**
 * Hibernate validator resolver.
 */
public class HibernateValidatorResolver implements JakartaValidatorResolver{

  @Override
  public ConstraintValidator<Annotation, Object> getValidator(Annotation annotation, Object value) {
    ConstraintValidator<?, ?> validator = switch (annotation) {
      case NotNull notNull -> new NotNullValidator();
      case Size size -> switch (value) {
        case null -> (v, c) -> true;
        case Object[] array -> new SizeValidatorForArray();
        case boolean[] array -> new SizeValidatorForArraysOfBoolean();
        case byte[] array -> new SizeValidatorForArraysOfByte();
        case char[] array -> new SizeValidatorForArraysOfChar();
        case double[] array -> new SizeValidatorForArraysOfDouble();
        case float[] array -> new SizeValidatorForArraysOfFloat();
        case int[] array -> new SizeValidatorForArraysOfInt();
        case long[] array -> new SizeValidatorForArraysOfLong();
        case short[] array -> new SizeValidatorForArraysOfShort();
        case CharSequence charSequence -> new SizeValidatorForCharSequence();
        case Collection<?> collection -> new SizeValidatorForCollection();
        case Map<?, ?> map -> new SizeValidatorForMap();
        default -> (v, c) -> true;
      };
      case DecimalMax decimalMax -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new DecimalMaxValidatorForBigDecimal();
        case BigInteger b -> new DecimalMaxValidatorForBigInteger();
        case Byte b -> new DecimalMaxValidatorForByte();
        case CharSequence c -> new DecimalMaxValidatorForCharSequence();
        case Double d -> new DecimalMaxValidatorForDouble();
        case Float f -> new DecimalMaxValidatorForFloat();
        case Integer i -> new DecimalMaxValidatorForInteger();
        case Long l -> new DecimalMaxValidatorForLong();
        case Short s -> new DecimalMaxValidatorForShort();
        case Number n -> new DecimalMaxValidatorForNumber();
        default -> (v, c) -> true;
      };
      case DecimalMin decimalMin -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new DecimalMinValidatorForBigDecimal();
        case BigInteger b -> new DecimalMinValidatorForBigInteger();
        case Byte b -> new DecimalMinValidatorForByte();
        case CharSequence c -> new DecimalMinValidatorForCharSequence();
        case Double d -> new DecimalMinValidatorForDouble();
        case Float f -> new DecimalMinValidatorForFloat();
        case Integer i -> new DecimalMinValidatorForInteger();
        case Long l -> new DecimalMinValidatorForLong();
        case Short s -> new DecimalMinValidatorForShort();
        case Number n -> new DecimalMinValidatorForNumber();
        default -> (v, c) -> true;
      };
      case Min min -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new MinValidatorForBigDecimal();
        case BigInteger b -> new MinValidatorForBigInteger();
        case Byte b -> new MinValidatorForByte();
        case Double d -> new MinValidatorForDouble();
        case Float f -> new MinValidatorForFloat();
        case Integer i -> new MinValidatorForInteger();
        case Long l -> new MinValidatorForLong();
        case Short s -> new MinValidatorForShort();
        case Number n -> new MinValidatorForNumber();
        default -> (v, c) -> true;
      };
      case Max max -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new MaxValidatorForBigDecimal();
        case BigInteger b -> new MaxValidatorForBigInteger();
        case Byte b -> new MaxValidatorForByte();
        case Double d -> new MaxValidatorForDouble();
        case Float f -> new MaxValidatorForFloat();
        case Integer i -> new MaxValidatorForInteger();
        case Long l -> new MaxValidatorForLong();
        case Short s -> new MaxValidatorForShort();
        case Number n -> new MaxValidatorForNumber();
        default -> (v, c) -> true;
      };
      case Positive positive -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new PositiveValidatorForBigDecimal();
        case BigInteger b -> new PositiveValidatorForBigInteger();
        case Byte b -> new PositiveValidatorForByte();
        case Double d -> new PositiveValidatorForDouble();
        case Float f -> new PositiveValidatorForFloat();
        case Integer i -> new PositiveValidatorForInteger();
        case Long l -> new PositiveValidatorForLong();
        case Short s -> new PositiveValidatorForShort();
        case Number n -> new PositiveValidatorForNumber();
        default -> (v, c) -> true;
      };
      case Negative negative -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new NegativeValidatorForBigDecimal();
        case BigInteger b -> new NegativeValidatorForBigInteger();
        case Byte b -> new NegativeValidatorForByte();
        case Double d -> new NegativeValidatorForDouble();
        case Float f -> new NegativeValidatorForFloat();
        case Integer i -> new NegativeValidatorForInteger();
        case Long l -> new NegativeValidatorForLong();
        case Short s -> new NegativeValidatorForShort();
        case Number n -> new NegativeValidatorForNumber();
        default -> (v, c) -> true;
      };
      case Email email -> switch (value) {
        case null -> (v, c) -> true;
        case CharSequence c -> new EmailValidator();
        default -> (v, c) -> true;
      };
      case Pattern pattern -> switch (value) {
        case null -> (v, c) -> true;
        case CharSequence c -> new PatternValidator();
        default -> (v, c) -> true;
      };
      case Future future -> switch (value) {
        case null -> (v, c) -> true;
        case Calendar c -> new FutureValidatorForCalendar();
        case Date d -> new FutureValidatorForDate();
        case Instant i -> new FutureValidatorForInstant();
        case LocalDate d -> new FutureValidatorForLocalDate();
        case LocalDateTime dt -> new FutureValidatorForLocalDateTime();
        case LocalTime t -> new FutureValidatorForLocalTime();
        case MonthDay md -> new FutureValidatorForMonthDay();
        case OffsetDateTime dt -> new FutureValidatorForOffsetDateTime();
        case OffsetTime t -> new FutureValidatorForOffsetTime();
        case Year y -> new FutureValidatorForYear();
        case YearMonth ym -> new FutureValidatorForYearMonth();
        case ZonedDateTime zdt -> new FutureValidatorForZonedDateTime();
        default -> (v, c) -> true;
      };
      case FutureOrPresent futureOrPresent -> switch (value) {
        case null -> (v, c) -> true;
        case Calendar c -> new FutureOrPresentValidatorForCalendar();
        case Date d -> new FutureOrPresentValidatorForDate();
        case Instant i -> new FutureOrPresentValidatorForInstant();
        case LocalDate d -> new FutureOrPresentValidatorForLocalDate();
        case LocalDateTime dt -> new FutureOrPresentValidatorForLocalDateTime();
        case LocalTime t -> new FutureOrPresentValidatorForLocalTime();
        case MonthDay md -> new FutureOrPresentValidatorForMonthDay();
        case OffsetDateTime dt -> new FutureOrPresentValidatorForOffsetDateTime();
        case OffsetTime t -> new FutureOrPresentValidatorForOffsetTime();
        case Year y -> new FutureOrPresentValidatorForYear();
        case YearMonth ym -> new FutureOrPresentValidatorForYearMonth();
        case ZonedDateTime zdt -> new FutureOrPresentValidatorForZonedDateTime();
        default -> (v, c) -> true;
      };
      case Past past -> switch (value) {
        case null -> (v, c) -> true;
        case Calendar c -> new PastValidatorForCalendar();
        case Date d -> new PastValidatorForDate();
        case Instant i -> new PastValidatorForInstant();
        case LocalDate d -> new PastValidatorForLocalDate();
        case LocalDateTime dt -> new PastValidatorForLocalDateTime();
        case LocalTime t -> new PastValidatorForLocalTime();
        case MonthDay md -> new PastValidatorForMonthDay();
        case OffsetDateTime dt -> new PastValidatorForOffsetDateTime();
        case OffsetTime t -> new PastValidatorForOffsetTime();
        case Year y -> new PastValidatorForYear();
        case YearMonth ym -> new PastValidatorForYearMonth();
        case ZonedDateTime zdt -> new PastValidatorForZonedDateTime();
        default -> (v, c) -> true;
      };
      case PastOrPresent pastOrPresent -> switch (value) {
        case null -> (v, c) -> true;
        case Calendar c -> new PastOrPresentValidatorForCalendar();
        case Date d -> new PastOrPresentValidatorForDate();
        case Instant i -> new PastOrPresentValidatorForInstant();
        case LocalDate d -> new PastOrPresentValidatorForLocalDate();
        case LocalDateTime dt -> new PastOrPresentValidatorForLocalDateTime();
        case LocalTime t -> new PastOrPresentValidatorForLocalTime();
        case MonthDay md -> new PastOrPresentValidatorForMonthDay();
        case OffsetDateTime dt -> new PastOrPresentValidatorForOffsetDateTime();
        case OffsetTime t -> new PastOrPresentValidatorForOffsetTime();
        case Year y -> new PastOrPresentValidatorForYear();
        case YearMonth ym -> new PastOrPresentValidatorForYearMonth();
        case ZonedDateTime zdt -> new PastOrPresentValidatorForZonedDateTime();
        default -> (v, c) -> true;
      };
      case NegativeOrZero negativeOrZero -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new NegativeOrZeroValidatorForBigDecimal();
        case BigInteger b -> new NegativeOrZeroValidatorForBigInteger();
        case Byte b -> new NegativeOrZeroValidatorForByte();
        case Double d -> new NegativeOrZeroValidatorForDouble();
        case Float f -> new NegativeOrZeroValidatorForFloat();
        case Integer i -> new NegativeOrZeroValidatorForInteger();
        case Long l -> new NegativeOrZeroValidatorForLong();
        case Short s -> new NegativeOrZeroValidatorForShort();
        case Number n -> new NegativeOrZeroValidatorForNumber();
        default -> (v, c) -> true;
      };
      case PositiveOrZero positiveOrZero -> switch (value) {
        case null -> (v, c) -> true;
        case BigDecimal b -> new PositiveOrZeroValidatorForBigDecimal();
        case BigInteger b -> new PositiveOrZeroValidatorForBigInteger();
        case Byte b -> new PositiveOrZeroValidatorForByte();
        case Double d -> new PositiveOrZeroValidatorForDouble();
        case Float f -> new PositiveOrZeroValidatorForFloat();
        case Integer i -> new PositiveOrZeroValidatorForInteger();
        case Long l -> new PositiveOrZeroValidatorForLong();
        case Short s -> new PositiveOrZeroValidatorForShort();
        case Number n -> new PositiveOrZeroValidatorForNumber();
        default -> (v, c) -> true;
      };
      case Digits digits -> switch (value) {
        case null -> (v, c) -> true;
        case Number n -> new DigitsValidatorForNumber();
        default -> (v, c) -> true;
      };
      case NotBlank notBlank -> switch (value) {
        case null -> (v, c) -> true;
        case CharSequence c -> new NotBlankValidator();
        default -> (v, c) -> true;
      };
      case NotEmpty notEmpty -> switch (value) {
        case null -> (v, c) -> true;
        case CharSequence c -> new NotEmptyValidatorForCharSequence();
        case Collection<?> coll -> new NotEmptyValidatorForCollection();
        case Map<?, ?> map -> new NotEmptyValidatorForMap();
        case Object[] array -> new NotEmptyValidatorForArray();
        default -> (v, c) -> true;
      };

      default -> (v, c) -> true;
    };
    @SuppressWarnings("unchecked")
    ConstraintValidator<Annotation, Object> typedValidator = (ConstraintValidator<Annotation, Object>) validator;
    typedValidator.initialize(annotation);
    return typedValidator;
  }
}
